import schulze
import random


def test_6_candidates_45_votes():
    # Candidate 'x' is someone no-one voted for but was eligible.
    # Otherwise, this test reflects the example on https://en.wikipedia.org/wiki/Schulze_method
    candidates = ['a', 'b', 'c', 'd', 'e', 'x']
    votes = [
        [(1, 'a'), (2, 'c'), (3, 'b'), (4, 'e'), (5, 'd')],
        [(1, 'a'), (2, 'c'), (3, 'b'), (4, 'e'), (5, 'd')],
        [(1, 'a'), (2, 'c'), (3, 'b'), (4, 'e'), (5, 'd')],
        [(1, 'a'), (2, 'c'), (3, 'b'), (4, 'e'), (5, 'd')],
        [(1, 'a'), (2, 'c'), (3, 'b'), (4, 'e'), (5, 'd')], #5
        [(1, 'a'), (2, 'd'), (3, 'e'), (4, 'c'), (5, 'b')],
        [(1, 'a'), (2, 'd'), (3, 'e'), (4, 'c'), (5, 'b')],
        [(1, 'a'), (2, 'd'), (3, 'e'), (4, 'c'), (5, 'b')],
        [(1, 'a'), (2, 'd'), (3, 'e'), (4, 'c'), (5, 'b')],
        [(1, 'a'), (2, 'd'), (3, 'e'), (4, 'c'), (5, 'b')], #5
        [(1, 'b'), (2, 'e'), (3, 'd'), (4, 'a'), (5, 'c')],
        [(1, 'b'), (2, 'e'), (3, 'd'), (4, 'a'), (5, 'c')],
        [(1, 'b'), (2, 'e'), (3, 'd'), (4, 'a'), (5, 'c')],
        [(1, 'b'), (2, 'e'), (3, 'd'), (4, 'a'), (5, 'c')],
        [(1, 'b'), (2, 'e'), (3, 'd'), (4, 'a'), (5, 'c')],
        [(1, 'b'), (2, 'e'), (3, 'd'), (4, 'a'), (5, 'c')],
        [(1, 'b'), (2, 'e'), (3, 'd'), (4, 'a'), (5, 'c')],
        [(1, 'b'), (2, 'e'), (3, 'd'), (4, 'a'), (5, 'c')], #8
        [(1, 'c'), (2, 'a'), (3, 'b'), (4, 'e'), (5, 'd')],
        [(1, 'c'), (2, 'a'), (3, 'b'), (4, 'e'), (5, 'd')], #20
        [(1, 'c'), (2, 'a'), (3, 'b'), (4, 'e'), (5, 'd')], #3
        [(1, 'c'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'e')],
        [(1, 'c'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'e')], #2
        [(1, 'd'), (2, 'c'), (3, 'e'), (4, 'b'), (5, 'a')],
        [(1, 'd'), (2, 'c'), (3, 'e'), (4, 'b'), (5, 'a')],
        [(1, 'd'), (2, 'c'), (3, 'e'), (4, 'b'), (5, 'a')],
        [(1, 'd'), (2, 'c'), (3, 'e'), (4, 'b'), (5, 'a')],
        [(1, 'd'), (2, 'c'), (3, 'e'), (4, 'b'), (5, 'a')],
        [(1, 'd'), (2, 'c'), (3, 'e'), (4, 'b'), (5, 'a')],
        [(1, 'd'), (2, 'c'), (3, 'e'), (4, 'b'), (5, 'a')], #30
        [(1, 'c'), (2, 'a'), (3, 'e'), (4, 'b'), (5, 'd')],
        [(1, 'c'), (2, 'a'), (3, 'e'), (4, 'b'), (5, 'd')],
        [(1, 'c'), (2, 'a'), (3, 'e'), (4, 'b'), (5, 'd')],
        [(1, 'c'), (2, 'a'), (3, 'e'), (4, 'b'), (5, 'd')],
        [(1, 'c'), (2, 'a'), (3, 'e'), (4, 'b'), (5, 'd')],
        [(1, 'c'), (2, 'a'), (3, 'e'), (4, 'b'), (5, 'd')],
        [(1, 'c'), (2, 'a'), (3, 'e'), (4, 'b'), (5, 'd')], #7
        [(1, 'e'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'c')],
        [(1, 'e'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'c')],
        [(1, 'e'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'c')], #40
        [(1, 'e'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'c')],
        [(1, 'e'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'c')],
        [(1, 'e'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'c')],
        [(1, 'e'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'c')],
        [(1, 'e'), (2, 'b'), (3, 'a'), (4, 'd'), (5, 'c')] #8
    ]

    # Randomize the votes
    random.shuffle(votes)

    # Create directed graph
    preference = schulze.rank_votes(votes, candidates)

    # Get the strongest paths of each candidate
    strongest_paths = schulze.compute_strongest_paths(preference, candidates)

    # Get final, ordered, results
    results = schulze.get_ordered_voting_results(strongest_paths)

    assert ", ".join(results.keys()) == "e, a, c, b, d, x"


def test_3_candidates_3_votes_cyclical():

    candidates = ['x', 'y', 'z']
    votes = [
        [(1, 'x'), (2, 'y'), (3, 'z')],
        [(1, 'y'), (2, 'z'), (3, 'x')],
        [(1, 'z'), (2, 'x'), (3, 'y')]
    ]

    # Randomize the votes
    random.shuffle(votes)

    # Create directed graph
    preference = schulze.rank_votes(votes, candidates)

    # Get the strongest paths of each candidate
    strongest_paths = schulze.compute_strongest_paths(preference, candidates)

    # Get final, ordered, results
    results = schulze.get_ordered_voting_results(strongest_paths)

    # We should only get 3 results, even if this is cyclical tied vote.
    assert len(results) == 3

    # All path strengths should be equal, this is a tied vote!
    for sp in strongest_paths.itervalues():
        assert sum(sp.values()) == 4

def generate_vote(candidate_chances):
    """
    returns a list of vote choices, votes are picked based on each cadidate's chances of being voted for.
    [(1, 'candidate_id'), (2, 'candidate_id'), (2, 'candidate_id'), ...]
    Votes are generated by determining how many candidates a voter wants to pick. 
    At least one pass is made through the candidate_chance list (possibly picking more candidates than chosen but never more than are avilable)
    for each candidate, it is randomly determined if they will be picked that round. Every candidate picked in each round will have the same rank number.
    For example; candidate chances are:
    [(0.3103760707038792, 1), (0.3368433989455909, 0), (0.40308497270067967, 4), (0.6070980766930767, 2), (0.7710239099894114, 3)]
    Voter is determined to pick 3 candidates.
    In the first round each candidate is checked
    0.3103760707038792 rolls 0.1 and is picked at rank 1 (first round) - 2 remaining picks
    0.3368433989455909 rolls 0.9 and is not picked
    0.40308497270067967 rolls 0.3 and is picked at rank 1 - 1 remaining pick
    0.6070980766930767 rolls a 0.5 and is picked at rank 1 - 0 remaining picks but not all candidates have been checked
    0.7710239099894114 rolls a 0.6 and is picked at rank 1
    Vote returned is [(1, 1), (1, 4), (1, 2), (1,3)]
    """
    nr_to_vote_for = random.randint(1,len(candidate_chances)) #vote for at least 1
    votes = []

    rank = 1
    while nr_to_vote_for > 0:
        for c in candidate_chances:
            if random.random() < c[0]:
                votes.append((rank,c[1]))
                nr_to_vote_for -= 1
            if rank > 1 and nr_to_vote_for == 0:
                break
        rank += 1
    return votes


def statistical_test(nr_candidates, nr_voters):
    """
    Runs a statistical test of Shulze with nr_candidates and nr_voters.
    Each voter generates a set of choices (a vote) based on the chances of each candidate's randomly determined chance of winning.
    """
    candidates = list(range(nr_candidates))
    candidate_chances = [(random.random()/2,c) for c in candidates]
    candidate_chances.sort()
    candidate_chances.reverse()

    voters = list(range(nr_voters))
    votes = [generate_vote(candidate_chances) for v in voters]

    # Create directed graph
    preference = schulze.rank_votes(votes, candidates)

    # Get the strongest paths of each candidate
    strongest_paths = schulze.compute_strongest_paths(preference, candidates)

    # Get final, ordered, results
    results = schulze.get_ordered_voting_results(strongest_paths)

    print candidate_chances
    print results

    for candidate in candidate_chances:
        print "candidate", candidate[1], "had", candidate[0], "% chance of winning."
        print "candidate was ranked above", 0 if results[candidate[1]] is None else len(results[candidate[1]]), "other candidates"



"""
Example results from 50 candidates and 300,000 voters:
statistical_test(50, 300000)
[(0.4832009486537489, 26), (0.46402129554206284, 39), (0.4314857741281369, 15), (0.4207539035320752, 25), (0.4191971583164241, 42), (0.41890110595356067, 35), (0.40106555615177486, 13), (0.38403545526162036, 41), (0.3800494275628969, 7), (0.3779677951008493, 0), (0.37190768617649034, 34), (0.3577785865010803, 1), (0.3485248603603083, 14), (0.33021262155505815, 5), (0.3287223589001639, 37), (0.32788441654311007, 11), (0.325254931928605, 29), (0.32107057080453305, 10), (0.31596922035028496, 31), (0.297191015742479, 33), (0.28758152286752475, 17), (0.2740606644019165, 16), (0.25845548897108417, 44), (0.24412891208968074, 22), (0.23768246620245126, 8), (0.22156629855562987, 46), (0.21971702173148905, 30), (0.21933329024497666, 38), (0.2166524188875798, 4), (0.2080068781108187, 2), (0.17159724788280412, 19), (0.15747207734540092, 49), (0.14914925692624775, 28), (0.1460316260837652, 36), (0.14338782799218175, 3), (0.13546630015973649, 47), (0.12401775419431799, 45), (0.11263005575077684, 21), (0.10228107347761745, 18), (0.09341941252399721, 23), (0.0918015096320845, 20), (0.06031445213463038, 12), (0.058498060642947325, 48), (0.056770555488715735, 6), (0.05420383156610592, 27), (0.0540082976787592, 43), (0.0487528996790883, 40), (0.04288176968324886, 32), (0.023569185283824734, 24), (0.0073776195400965805, 9)]
OrderedDict([(26, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), (39, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), (15, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), (25, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), (35, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), (42, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49]), (13, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49]), (41, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (7, [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (0, [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (34, [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (1, [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (14, [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (37, [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (5, [2, 3, 4, 6, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (11, [2, 3, 4, 6, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (29, [2, 3, 4, 6, 8, 9, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 36, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (10, [2, 3, 4, 6, 8, 9, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 36, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (31, [2, 3, 4, 6, 8, 9, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 32, 33, 36, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (33, [2, 3, 4, 6, 8, 9, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 32, 36, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (17, [2, 3, 4, 6, 8, 9, 12, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 32, 36, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (16, [2, 3, 4, 6, 8, 9, 12, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 32, 36, 38, 40, 43, 44, 45, 46, 47, 48, 49]), (44, [2, 3, 4, 6, 8, 9, 12, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 32, 36, 38, 40, 43, 45, 46, 47, 48, 49]), (22, [2, 3, 4, 6, 8, 9, 12, 18, 19, 20, 21, 23, 24, 27, 28, 30, 32, 36, 38, 40, 43, 45, 46, 47, 48, 49]), (8, [2, 3, 4, 6, 9, 12, 18, 19, 20, 21, 23, 24, 27, 28, 30, 32, 36, 38, 40, 43, 45, 46, 47, 48, 49]), (46, [2, 3, 4, 6, 9, 12, 18, 19, 20, 21, 23, 24, 27, 28, 30, 32, 36, 38, 40, 43, 45, 47, 48, 49]), (38, [2, 3, 4, 6, 9, 12, 18, 19, 20, 21, 23, 24, 27, 28, 30, 32, 36, 40, 43, 45, 47, 48, 49]), (30, [2, 3, 4, 6, 9, 12, 18, 19, 20, 21, 23, 24, 27, 28, 32, 36, 40, 43, 45, 47, 48, 49]), (4, [2, 3, 6, 9, 12, 18, 19, 20, 21, 23, 24, 27, 28, 32, 36, 40, 43, 45, 47, 48, 49]), (2, [3, 6, 9, 12, 18, 19, 20, 21, 23, 24, 27, 28, 32, 36, 40, 43, 45, 47, 48, 49]), (19, [3, 6, 9, 12, 18, 20, 21, 23, 24, 27, 28, 32, 36, 40, 43, 45, 47, 48, 49]), (49, [3, 6, 9, 12, 18, 20, 21, 23, 24, 27, 28, 32, 36, 40, 43, 45, 47, 48]), (28, [3, 6, 9, 12, 18, 20, 21, 23, 24, 27, 32, 36, 40, 43, 45, 47, 48]), (3, [6, 9, 12, 18, 20, 21, 23, 24, 27, 32, 36, 40, 43, 45, 47, 48]), (36, [6, 9, 12, 18, 20, 21, 23, 24, 27, 32, 40, 43, 45, 47, 48]), (47, [6, 9, 12, 18, 20, 21, 23, 24, 27, 32, 40, 43, 45, 48]), (45, [6, 9, 12, 18, 20, 21, 23, 24, 27, 32, 40, 43, 48]), (21, [6, 9, 12, 18, 20, 23, 24, 27, 32, 40, 43, 48]), (18, [6, 9, 12, 20, 23, 24, 27, 32, 40, 43, 48]), (23, [6, 9, 12, 20, 24, 27, 32, 40, 43, 48]), (20, [6, 9, 12, 24, 27, 32, 40, 43, 48]), (12, [6, 9, 24, 27, 32, 40, 43, 48]), (48, [6, 9, 24, 27, 32, 40, 43]), (6, [9, 24, 27, 32, 40, 43]), (43, [9, 24, 27, 32, 40]), (27, [9, 24, 32, 40]), (40, [9, 24, 32]), (32, [9, 24]), (24, [9]), (9, None)])
candidate 26 had 0.483200948654 % chance of winning.
candidate was ranked above 49 other candidates
candidate 39 had 0.464021295542 % chance of winning.
candidate was ranked above 48 other candidates
candidate 15 had 0.431485774128 % chance of winning.
candidate was ranked above 47 other candidates
candidate 25 had 0.420753903532 % chance of winning.
candidate was ranked above 46 other candidates
candidate 42 had 0.419197158316 % chance of winning.
candidate was ranked above 44 other candidates
candidate 35 had 0.418901105954 % chance of winning.
candidate was ranked above 45 other candidates
candidate 13 had 0.401065556152 % chance of winning.
candidate was ranked above 43 other candidates
candidate 41 had 0.384035455262 % chance of winning.
candidate was ranked above 42 other candidates
candidate 7 had 0.380049427563 % chance of winning.
candidate was ranked above 41 other candidates
candidate 0 had 0.377967795101 % chance of winning.
candidate was ranked above 40 other candidates
candidate 34 had 0.371907686176 % chance of winning.
candidate was ranked above 39 other candidates
candidate 1 had 0.357778586501 % chance of winning.
candidate was ranked above 38 other candidates
candidate 14 had 0.34852486036 % chance of winning.
candidate was ranked above 37 other candidates
candidate 5 had 0.330212621555 % chance of winning.
candidate was ranked above 35 other candidates
candidate 37 had 0.3287223589 % chance of winning.
candidate was ranked above 36 other candidates
candidate 11 had 0.327884416543 % chance of winning.
candidate was ranked above 34 other candidates
candidate 29 had 0.325254931929 % chance of winning.
candidate was ranked above 33 other candidates
candidate 10 had 0.321070570805 % chance of winning.
candidate was ranked above 32 other candidates
candidate 31 had 0.31596922035 % chance of winning.
candidate was ranked above 31 other candidates
candidate 33 had 0.297191015742 % chance of winning.
candidate was ranked above 30 other candidates
candidate 17 had 0.287581522868 % chance of winning.
candidate was ranked above 29 other candidates
candidate 16 had 0.274060664402 % chance of winning.
candidate was ranked above 28 other candidates
candidate 44 had 0.258455488971 % chance of winning.
candidate was ranked above 27 other candidates
candidate 22 had 0.24412891209 % chance of winning.
candidate was ranked above 26 other candidates
candidate 8 had 0.237682466202 % chance of winning.
candidate was ranked above 25 other candidates
candidate 46 had 0.221566298556 % chance of winning.
candidate was ranked above 24 other candidates
candidate 30 had 0.219717021731 % chance of winning.
candidate was ranked above 22 other candidates
candidate 38 had 0.219333290245 % chance of winning.
candidate was ranked above 23 other candidates
candidate 4 had 0.216652418888 % chance of winning.
candidate was ranked above 21 other candidates
candidate 2 had 0.208006878111 % chance of winning.
candidate was ranked above 20 other candidates
candidate 19 had 0.171597247883 % chance of winning.
candidate was ranked above 19 other candidates
candidate 49 had 0.157472077345 % chance of winning.
candidate was ranked above 18 other candidates
candidate 28 had 0.149149256926 % chance of winning.
candidate was ranked above 17 other candidates
candidate 36 had 0.146031626084 % chance of winning.
candidate was ranked above 15 other candidates
candidate 3 had 0.143387827992 % chance of winning.
candidate was ranked above 16 other candidates
candidate 47 had 0.13546630016 % chance of winning.
candidate was ranked above 14 other candidates
candidate 45 had 0.124017754194 % chance of winning.
candidate was ranked above 13 other candidates
candidate 21 had 0.112630055751 % chance of winning.
candidate was ranked above 12 other candidates
candidate 18 had 0.102281073478 % chance of winning.
candidate was ranked above 11 other candidates
candidate 23 had 0.093419412524 % chance of winning.
candidate was ranked above 10 other candidates
candidate 20 had 0.0918015096321 % chance of winning.
candidate was ranked above 9 other candidates
candidate 12 had 0.0603144521346 % chance of winning.
candidate was ranked above 8 other candidates
candidate 48 had 0.0584980606429 % chance of winning.
candidate was ranked above 7 other candidates
candidate 6 had 0.0567705554887 % chance of winning.
candidate was ranked above 6 other candidates
candidate 27 had 0.0542038315661 % chance of winning.
candidate was ranked above 4 other candidates
candidate 43 had 0.0540082976788 % chance of winning.
candidate was ranked above 5 other candidates
candidate 40 had 0.0487528996791 % chance of winning.
candidate was ranked above 3 other candidates
candidate 32 had 0.0428817696832 % chance of winning.
candidate was ranked above 2 other candidates
candidate 24 had 0.0235691852838 % chance of winning.
candidate was ranked above 1 other candidates
candidate 9 had 0.0073776195401 % chance of winning.
candidate was ranked above 0 other candidates
[Finished in 37.9s]
"""